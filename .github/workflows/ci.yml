name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  NX_CLOUD_ACCESS_TOKEN: ${{ secrets.NX_CLOUD_ACCESS_TOKEN }}

jobs:
  main:
    name: Nx Affected
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    # Cache npm dependencies
    - name: Cache node modules
      uses: actions/cache@v3
      with:
        path: node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    
    # Cache frontend node modules
    - name: Cache frontend node modules
      uses: actions/cache@v3
      with:
        path: frontend/node_modules
        key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-node-
    
    # Cache cargo dependencies
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: backend/target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    
    # Cache nx
    - name: Cache nx
      uses: actions/cache@v3
      with:
        path: .nx
        key: ${{ runner.os }}-nx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-nx-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install frontend dependencies
      run: npx nx install frontend
    
    # Derive appropriate SHAs for base and head for `nx affected` commands
    - uses: nrwl/nx-set-shas@v3
    
    # Run affected commands
    - name: Check format on affected projects
      run: npx nx affected -t format-check --parallel=3
    
    - name: Lint affected projects
      run: |
        npx nx affected -t lint --parallel=3
        npx nx affected -t lint-ci --parallel=3
    
    - name: Type check affected projects
      run: npx nx affected -t typecheck --parallel=3
    
    - name: Test affected projects
      run: |
        npx nx affected -t test --parallel=3
        npx nx affected -t test-ci --parallel=3
    
    - name: Build affected projects
      run: npx nx affected -t build --parallel=3

#  docker-build:
#    name: Docker Build
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
#    steps:
#    - uses: actions/checkout@v4
#
#    - name: Setup Node.js
#      uses: actions/setup-node@v4
#      with:
#        node-version: '18'
#
#    - name: Install nx
#      run: npm ci
#
#    - name: Set up Docker Buildx
#      uses: docker/setup-buildx-action@v3
#
#    - name: Build Docker images
#      run: npx nx build docker